#include "substitution_matrix.h"
#include "residue.h"
#include "misc.h"
#include "vec_util.h"

#include<boost/range/numeric.hpp>
#include <iostream>
#include <vector>
typedef std::vector<char> AlphaList;
typedef std::vector<SbstMatColumn> SbstMatColumnsList;
 
namespace {
	static const AlphabetVec alphabet = {'A','R','N','D','C','Q','E','G',
                                       'H','I','L','K','M','F','P','S',
                                       'T','W','Y','V'};
	//BLOSUM62
	static const SbstMatrix sim_scores = {{4, -1, -2, -2, 0, -1, -1, 0, -2, -1, 
                                         -1, -1, -1, -2, -1, 1, 0, -3, -2, 0},
                                        {-1, 5, 0, -2, -3, 1, 0, -2, 0, -3, -2,
                                          2, -1, -3, -2, -1, -1, -3, -2, -3},
                                        {-2, 0, 6, 1, -3, 0, 0, 0, 1, -3, -3, 
                                          0, -2, -3, -2, 1, 0, -4, -2, -3},
                                        {-2, -2, 1, 6, -3, 0, 2, -1, -1, -3, 
                                          -4, -1, -3, -3, -1, 0, -1, -4, -3, -3},
                                        {0, -3, -3, -3, 9, -3, -4, -3, -3, -1, 
                                          -1, -3, -1, -2, -3, -1, -1, -2, -2, -1},
                                        {-1, 1, 0, 0, -3, 5, 2, -2, 0, -3, -2, 
                                          1, 0, -3, -1, 0, -1, -2, -1, -2}, 
                                        {-1, 0, 0, 2, -4, 2, 5, -2, 0, -3, -3, 
                                          1, -2, -3, -1, 0, -1, -3, -2, -2}, 
                                        {0, -2, 0, -1, -3, -2, -2, 6, -2, -4, 
                                          -4, -2, -3, -3, -2, 0, -2, -2, -3, -3}, 
                                        {-2, 0, 1, -1, -3, 0, 0, -2, 8, -3, -3, 
                                          -1, -2, -1, -2, -1, -2, -2, 2, -3}, 
                                        {-1, -3, -3, -3, -1, -3, -3, -4, -3, 4, 
                                          2, -3, 1, 0, -3, -2, -1, -3, -1, 3}, 
                                        {-1, -2, -3, -4, -1, -2, -3, -4, -3, 2, 
                                          4, -2, 2, 0, -3, -2, -1, -2, -1, 1}, 
                                        {-1, 2, 0, -1, -3, 1, 1, -2, -1, -3, 
                                          -2, 5, -1, -3, -1, 0, -1, -3, -2, -2}, 
                                        {-1, -1, -2, -3, -1, 0, -2, -3, -2, 1, 
                                          2, -1, 5, 0, -2, -1, -1, -1, -1, 1}, 
                                        {-2, -3, -3, -3, -2, -3, -3, -3, -1, 0, 
                                          0, -3, 0, 6, -4, -2, -2, 1, 3, -1}, 
                                        {-1, -2, -2, -1, -3, -1, -1, -2, -2, 
                                          -3, -3, -1, -2, -4, 7, -1, -1, -4, -3, -2}, 
                                        {1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -2, 
                                          0, -1, -2, -1, 4, 1, -3, -2, -2}, 
                                        {0, -1, 0, -1, -1, -1, -1, -2, -2, -1, 
                                          -1, -1, -1, -2, -1, 1, 5, -2, -2, 0}, 
                                        {-3, -3, -4, -4, -2, -2, -3, -2, -2, 
                                          -3, -2, -3, -1, 1, -4, -3, -2, 11, 2, -3}, 
                                        {-2, -2, -2, -3, -2, -1, -2, -3, 2, -1, 
                                          -1, -2, -1, 3, -3, -2, -2, 2, 7, -1}, 
                                        {0, -3, -3, -3, -1, -2, -2, -3, -3, 3, 
                                          1, -2, 1, -1, -2, -2, 0, -3, -1, 4}};
	//DISORDER
	//static const std::vector< std::vector<int> > sim_scores = {{3, -2, -1, -1, -1, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -5, -2, 0}, {-2, 5, 0, -2, -1, 1, -1, -2, 0, -2, -2, 2, -1, -3, -2, -1, -1, 0, -2, -2}, {-1, 0, 4, 1, -1, 1, 0, 0, 2, -3, -3, 0, -2, -2, -1, 1, 0, -3, -1, -3}, {-1, -2, 1, 4, -3, 0, 2, -1, -1, -4, -4, -1, -4, -4, -2, 0, -1, -4, -4, -4}, {-1, -1, -1, -3, 10, -3, -4, -3, -1, 0, -1, -3, 0, -1, -2, 0, 1, -5, 0, 1}, {-1, 1, 1, 0, -3, 5, 0, -2, 1, -2, -2, 0, -1, -2, -1, 0, 0, -1, 0, -2}, {-1, -1, 0, 2, -4, 0, 4, -2, -1, -3, -3, 0, -3, -4, -1, -1, -1, -4, -3, -2}, {0, -2, 0, -1, -3, -2, -2, 5, -1, -5, -4, -2, -4, -4, -1, 0, -2, -4, -3, -4}, {-2, 0, 2, -1, -1, 1, -1, -1, 8, -2, -2, -1, -2, 0, -2, -1, 0, -2, 2, -2}, {-1, -2, -3, -4, 0, -2, -3, -5, -2, 4, 2, -2, 1, 1, -2, -2, -1, -2, 0, 3}, {-1, -2, -3, -4, -1, -2, -3, -4, -2, 2, 4, -2, 2, 1, -1, -2, -2, -2, 0, 1}, {-1, 2, 0, -1, -3, 0, 0, -2, -1, -2, -2, 4, -2, -3, -1, -1, 0, -3, -2, -2}, {-1, -1, -2, -4, 0, -1, -3, -4, -2, 1, 2, -2, 7, 1, -2, -2, -1, -1, -1, 1}, {-2, -3, -2, -4, -1, -2, -4, -4, 0, 1, 1, -3, 1, 7, -3, -2, -2, -1, 4, 0}, {-1, -2, -1, -2, -2, -1, -1, -1, -2, -2, -1, -1, -2, -3, 6, 0, -1, -1, -3, -1}, {1, -1, 1, 0, 0, 0, -1, 0, -1, -2, -2, -1, -2, -2, 0, 3, 1, -3, -2, -2}, {0, -1, 0, -1, 1, 0, -1, -2, 0, -1, -2, 0, -1, -2, -1, 1, 4, -5, -1, 0}, {-5, 0, -3, -4, -5, -1, -4, -4, -2, -2, -2, -3, -1, -1, -1, -3, -5, 13, 3, -4}, {-2, -2, -1, -4, 0, 0, -3, -3, 2, 0, 0, -2, -1, 4, -3, -2, -1, 3, 8, -1}, {0, -2, -3, -4, 1, -2, -2, -4, -2, 3, 1, -2, 1, 0, -1, -2, 0, -4, -1, 4}};
	//dummy 0 5
	//static const std::vector< std::vector<int> > sim_scores = {{5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5}};
	//DUNKER extended alphabet	
	//static const std::vector< std::vector<int> > sim_scores = {{9, 1, 2, 2, 1, 3, 2, 2, 1, 1, 1, 2, 0, 0, 3, 3, 4, -1, 0, 3}, {1, 10, 1, 0, 1, 3, 1, 2, 3, 0, 0, 5, -1, -2, 0, 1, 1, 2, -1, 0}, {2, 1, 11, 4, 1, 3, 2, 2, 3, 0, -1, 3, -1, -1, 1, 4, 3, -2, 1, 0}, {2, 0, 4, 10, -2, 2, 5, 2, 2, -1, -2, 1, -2, -2, 1, 2, 2, -3, -1, 0}, {1, 1, 1, -2, 17, 0, -3, 1, 0, 0, 0, -1, -2, 1, -1, 2, 1, 3, 2, 1}, {3, 3, 3, 2, 0, 11, 4, 0, 4, 0, 1, 3, 0, -1, 2, 2, 2, 1, 0, 1}, {2, 1, 2, 5, -3, 4, 9, 1, 1, -1, -1, 3, -1, -2, 0, 1, 1, -2, -2, 0}, {2, 2, 2, 2, 1, 0, 1, 10, 0, -2, -2, 0, -2, -2, 0, 2, 1, 0, -2, 0}, {1, 3, 3, 2, 0, 4, 1, 0, 13, 0, 0, 1, -1, 2, 1, 1, 1, 1, 4, 0}, {1, 0, 0, -1, 0, 0, -1, -2, 0, 12, 5, 0, 4, 4, 0, 0, 2, 1, 2, 7}, {1, 0, -1, -2, 0, 1, -1, -2, 0, 5, 10, -1, 4, 5, 1, 0, 1, 2, 2, 4}, {2, 5, 3, 1, -1, 3, 3, 0, 1, 0, -1, 10, -1, -2, 0, 1, 2, -2, -1, 0}, {0, -1, -1, -2, -2, 0, -1, -2, -1, 4, 4, -1, 13, 2, -2, -1, 1, 0, 0, 3}, {0, -2, -1, -2, 1, -1, -2, -2, 2, 4, 5, -2, 2, 13, -1, 0, 0, 6, 8, 3}, {3, 0, 1, 1, -1, 2, 0, 0, 1, 0, 1, 0, -2, -1, 11, 2, 2, -1, -2, 1}, {3, 1, 4, 2, 2, 2, 1, 2, 1, 0, 0, 1, -1, 0, 2, 9, 4, -1, 0, 1}, {4, 1, 3, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 0, 2, 4, 10, -2, 0, 3}, {-1, 2, -2, -3, 3, 1, -2, 0, 1, 1, 2, -2, 0, 6, -1, -1, -2, 18, 6, 0}, {0, -1, 1, -1, 2, 0, -2, -2, 4, 2, 2, -1, 0, 8, -2, 0, 0, 6, 14, 1}, {3, 0, 0, 0, 1, 1, 0, 0, 0, 7, 4, 0, 3, 3, 1, 1, 3, 0, 1, 11}};
	//dummy binary
	//static const std::vector<std::vector<int> > sim_scores = {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}};
}


int substitution_matrix::get_element(char char1, char char2){
	int index1=0;
	int index2=0;
  for (unsigned int i = 0; i < alphabet.size(); i++){
		if(alphabet[i] == char1){
			index1 = i;
		}
		if(alphabet[i] == char2){
			index2 = i;
		}
	}
	return sim_scores[index1][index2];
}


ProfileMatrix substitution_matrix::ConvertToProfileFormat(ResidueSequence& seq){
	ProfileMatrix result(seq.size());
	SbstMatColumnsList new_sbst_row;
	for (unsigned int i = 0; i < result.size(); i++){
		if (seq[i].get_aa() == 'B'){
			new_sbst_row.clear();
			new_sbst_row.push_back(sim_scores[2]);
			new_sbst_row.push_back(sim_scores[3]);
			result[i] = vec_util::average(new_sbst_row);
		}
		else if (seq[i].get_aa() == 'Z'){
			new_sbst_row.clear();
			new_sbst_row.push_back(sim_scores[6]);
			new_sbst_row.push_back(sim_scores[7]);
			result[i] = vec_util::average(new_sbst_row);

		}
		else if (seq[i].get_aa() == 'X'){
			result[i] = vec_util::average(sim_scores);
		}
		else{
			int aAcidInt = FindAminoAcidsIndex(seq[i].get_aa());
      SbstMatColumn sbst_column_int = sim_scores[aAcidInt];
			result[i] = vec_util::convertIntVectorToDoubleVector(sbst_column_int);//adds a column to the result(converted from int to double)
		}
	}
	vec_util::transposeVec(result);
	return result;
}


int substitution_matrix::get_element(int i,int j){
	return sim_scores[i][j];
}


void substitution_matrix::get_column(unsigned int& column_no, 
                                     SbstMatColumn& column_int){
	column_int = sim_scores[column_no];
}


int substitution_matrix::FindAminoAcidsIndex(char aa){
	int aacid_index = -1;
	for (unsigned int i = 0; i < alphabet.size();i++){
		if (aa == alphabet[i]){
			aacid_index = i;
			break;
		}
	}
	return aacid_index;
}
